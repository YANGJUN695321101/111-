from tkinter import Label
from PyQt5.QtWidgets import QLabel
from PyQt5.QtWidgets import QSpinBox
from msilib.schema import CheckBox
import sys
import json
from tkinter import Spinbox
from PyQt5.QtCore import Qt, QPoint
from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QHBoxLayout, QPushButton, QTextEdit
from PyQt5.QtGui import QImage, QPixmap, QPainter, QPen
from PIL import Image
import pytesseract
from PIL import Image
from PyQt5.QtWidgets import QMainWindow
from tencentcloud.common import credential
from tencentcloud.common.profile.client_profile import ClientProfile
from tencentcloud.common.profile.http_profile import HttpProfile
from tencentcloud.tmt.v20180321 import tmt_client, models
from PyQt5.QtWidgets import QMainWindow, QVBoxLayout, QHBoxLayout, QTextEdit, QPushButton, QWidget, QCheckBox
from translate import Translator
import threading
import time
from PyQt5.QtCore import QTimer
from PyQt5.QtCore import QThread, pyqtSignal
import re 

class RecognitionThread(QThread):
    recognition_done = pyqtSignal(str)

    def __init__(self, img, parent=None):
        super().__init__(parent)
        self.img = img

    def run(self):
        text = pytesseract.image_to_string(self.img, lang='chi_sim+eng+jpn')
        self.recognition_done.emit(text)

# 添加以下行以设置 Tesseract-OCR 路径
pytesseract.pytesseract.tesseract_cmd = r'F:\Tesseract-OCR\tesseract.exe'
class OpenTranslationWindow(QWidget):
    def __init__(self, parent=None):        
        super().__init__(parent)
        self.setWindowFlags(self.windowFlags() | Qt.WindowStaysOnTopHint)
        self.setWindowTitle('翻译窗口')
        self.translation_text_edit = QTextEdit(self)
        vbox = QVBoxLayout()
        
        vbox.addWidget(self.translation_text_edit)
        self.setLayout(vbox)
class AutoRecognitionFrequencyWindow(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle('自动识别频率')
        vbox = QVBoxLayout()
        self.label = QLabel('识别频率（秒）:', self)
        self.frequency_spinbox = QSpinBox(self)
        self.frequency_spinbox.setMinimum(1)
        self.frequency_spinbox.setMaximum(60)
        self.frequency_spinbox.setValue(5)
        vbox.addWidget(self.label)
        vbox.addWidget(self.frequency_spinbox)
        self.setLayout(vbox)
class OpenRecognitionWindow(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        # 设置无边框窗口样式
        self.setWindowFlags(Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint | Qt.WindowStaysOnTopHint)
        # 设置背景透明
        self.setAttribute(Qt.WA_TranslucentBackground, True)
        self.margin = 5
        self.setContentsMargins(self.margin, self.margin, self.margin, self.margin)
        self.setCursor(Qt.SizeAllCursor)
        self.setMouseTracking(True)
        self.is_resizing = False
        self.old_pos = QPoint()
    def capture_screen(self):
        screen = QApplication.primaryScreen()
        screenshot = screen.grabWindow(QApplication.desktop().winId(),
                                   self.geometry().x() + self.margin,
                                   self.geometry().y() + self.margin,
                                   self.geometry().width() - 2 * self.margin,
                                   self.geometry().height() - 2 * self.margin)
        return screenshot.toImage()
    def resizeEvent(self, event):
        super().resizeEvent(event)

    def paintEvent(self, event):
        # 绘制虚线边框
        painter = QPainter(self)
        pen = QPen(Qt.DashLine)
        pen.setColor(Qt.red)
        pen.setWidth(2)
        painter.setPen(pen)
        painter.drawRect(self.margin, self.margin, self.width() - 2 * self.margin, self.height() - 2 * self.margin)
    def mousePressEvent(self, event):
        if event.button() == Qt.LeftButton:
            self.old_pos = event.globalPos()
            self.is_resizing = event.pos().x() > self.width() - 20 and event.pos().y() > self.height() - 20
            self.is_moving = not self.is_resizing
            super().mousePressEvent(event)
    def mouseMoveEvent(self, event):
        if event.buttons() == Qt.LeftButton:
            delta = QPoint(event.globalPos() - self.old_pos)
            if self.is_resizing:
                new_width = self.width() + delta.x()
                new_height = self.height() + delta.y()
                if new_width > self.minimumWidth() and new_height > self.minimumHeight():
                    self.resize(new_width, new_height)
            elif self.is_moving:
                self.move(self.x() + delta.x(), self.y() + delta.y())
            self.old_pos = event.globalPos()
        super().mouseMoveEvent(event)

    def mouseReleaseEvent(self, event):
        if event.button() == Qt.LeftButton:
            self.is_resizing = False
            self.is_moving = False
            super().mouseReleaseEvent(event)
class MyWidget(QMainWindow):
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.init_ui()
        self.translator = Translator(to_lang='en')
            
    def init_ui(self):
        self.setWindowTitle('双窗口识别修改')
        self.resize(500, 500)
        self.recognition_text_edit = QTextEdit(self)
        

        self.open_recognition_window_checkbox = QCheckBox('打开识别窗口', self)
        self.open_recognition_window_checkbox.stateChanged.connect(self.open_recognition_window)

        self.open_translation_window_checkbox = QCheckBox('打开翻译窗口', self)
        self.open_translation_window_checkbox.stateChanged.connect(self.open_translation_window)

        self.auto_recognition_checkbox = QCheckBox('自动识别', self)
        self.auto_recognition_checkbox.stateChanged.connect(self.auto_recognition)

        self.auto_translation_checkbox = QCheckBox('自动翻译', self)  # 新增自动翻译的勾选框
        self.auto_translation_checkbox.stateChanged.connect(self.auto_translate_text)  # 连接信号

        vbox = QVBoxLayout()
        vbox.addWidget(self.recognition_text_edit)

        hbox1 = QHBoxLayout()
        hbox1.addWidget(self.auto_recognition_checkbox)
        hbox1.addWidget(self.open_translation_window_checkbox)
        hbox1.addWidget(self.open_recognition_window_checkbox)

        hbox2 = QHBoxLayout()
        self.recognition_button = QPushButton('识别', self)
        self.translation_button = QPushButton('翻译', self)
        hbox2.addWidget(self.auto_translation_checkbox)
        self.frequency_label = QLabel('识别频率（秒）:', self)
        self.frequency_spinbox = QSpinBox(self)
        self.frequency_spinbox.setMinimum(1)
        self.frequency_spinbox.setMaximum(60)
        self.frequency_spinbox.setValue(5)

        hbox2.addWidget(self.frequency_label)
        hbox2.addWidget(self.frequency_spinbox)

        hbox2.addWidget(self.recognition_button)
        hbox2.addWidget(self.translation_button)

        vbox.addLayout(hbox1)
        vbox.addLayout(hbox2)

        central_widget = QWidget(self)
        central_widget.setLayout(vbox)
        self.setCentralWidget(central_widget)

        self.recognition_button.clicked.connect(self.recognize_text)
        self.translation_button.clicked.connect(self.translate_text)

    def auto_recognition(self):
        if self.auto_recognition_checkbox.isChecked():
            self.auto_recognition_frequency_widget = AutoRecognitionFrequencyWindow(self)
            self.auto_recognition_frequency_widget.show()

            self.auto_recognition_timer = QTimer(self)
            self.auto_recognition_timer.timeout.connect(self.recognize_text)
            self.auto_recognition_timer.start(self.auto_recognition_frequency_widget.frequency_spinbox.value() * 1000)

        else:
            if hasattr(self, 'auto_recognition_frequency_widget'):
                self.auto_recognition_frequency_widget.close()

            if hasattr(self, 'auto_recognition_timer'):
                self.auto_recognition_timer.stop()



    def open_recognition_window(self):
        if self.open_recognition_window_checkbox.isChecked():
            self.open_recognition_window_widget = OpenRecognitionWindow()
            self.open_recognition_window_widget.show()
        else:
            if hasattr(self, 'open_recognition_window_widget'):
                self.open_recognition_window_widget.close()

    def open_translation_window(self):
        if self.open_translation_window_checkbox.isChecked():
            self.open_translation_window_widget = OpenTranslationWindow()
            self.open_translation_window_widget.show()
        else:
            if hasattr(self, 'open_translation_window_widget'):
                self.open_translation_window_widget.close()

    def auto_recognize_text(self):
        if not self.auto_recognition_checkbox.isChecked():
            return

        def run_recognition():
            while self.auto_recognition_checkbox.isChecked():
                self.recognize_text()
                time.sleep(self.auto_recognition_frequency_widget.frequency_spinbox.value())

       # threading.Thread(target=run_recognition, daemon=True).start()
            self.auto_recognition_timer = QTimer(self)
            self.auto_recognition_timer.timeout.connect(self.recognize_text)
            self.auto_recognition_timer.start(self.auto_recognition_frequency_widget.frequency_spinbox.value() * 1000)


    def auto_translate_text(self):
        if self.open_translation_window_checkbox.isChecked():
            if hasattr(self, 'auto_translation_timer'):
                self.auto_translation_timer.stop()
            self.auto_translation_timer = QTimer(self)
            self.auto_translation_timer.timeout.connect(self.translate_text)
            self.auto_translation_timer.start(self.auto_recognition_frequency_widget.frequency_spinbox.value() * 1000)

    def auto_translate(self):
        while self.auto_translation_checkbox.isChecked():
            self.translate_text()
            time.sleep(self.auto_recognition_frequency_widget.frequency_spinbox.value())
        def run_translation():
            while self.open_translation_window_checkbox.isChecked():
                self.translate_text()
                time.sleep(self.auto_recognition_frequency_widget.frequency_spinbox.value())

        threading.Thread(target=run_translation, daemon=True).start()

    def translate_text(self):
        if not self.open_translation_window_checkbox.isChecked():
            return

        text = self.recognition_text_edit.toPlainText()
        
        # 更改为你需要的目标语言，例如：'en' 表示英语，'zh' 表示中文
        translated_text = self.translator.translate(text)
        self.open_translation_window_widget.translation_text_edit.setPlainText(translated_text)
    def set_recognition_text(self, text):
        # 使用正则表达式替换掉可能导致问题的特殊字符
        cleaned_text = re.sub(r'\x0c', '', text)
        self.recognition_text_edit.setPlainText(cleaned_text)

    def recognize_text(self):
        if hasattr(self, 'open_recognition_window_widget'):
            screenshot = self.open_recognition_window_widget.capture_screen()
            img = Image.fromqpixmap(QPixmap.fromImage(screenshot))

            # 创建一个 RecognitionThread 对象，并连接信号
            self.recognition_thread = RecognitionThread(img)
            self.recognition_thread.recognition_done.connect(self.set_recognition_text)
            self.recognition_thread.start()

    def set_recognition_text(self, text):
        self.recognition_text_edit.setPlainText(text)


if __name__ == '__main__':
    app = QApplication(sys.argv)
    widget = MyWidget()
    widget.show()
    sys.exit(app.exec_())
